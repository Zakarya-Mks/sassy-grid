@import '_variables';
@import '_mixins';

//meyer's css reset
@include css_reset;

// set the box model
*,
*::before,
*::after {
  box-sizing: border-box;
}

/*margin and padding section*/
@include get_fractional_Spacing;

/*background colors */
@include text-colors;

/*text-align*/
@include text-align;

/*background-color */
@include background-colors;

/*border */
@include borders;

/*display section */
@include displays;

/*display flex properties */
/*---------------------*/
//flex direction
@include flex-directions;
@include flex-wrap;
@include justify-content;
@include align-items;

// display grid properties
.row {
  @include grid-unit-size($grid-columns-count);
  display: flex;
  flex-flow: row wrap;
  margin-left: auto !important ;
  margin-right: auto !important;
}

// @include grid-column-settings;
@include grid-column-settings;
@include offset-column-settings;
@include column-order;

.container {
  max-width: 1140px;
  margin-right: auto;
  margin-left: auto;
}

.fluid-container {
  max-width: 100vw;
}

.img-fluid {
  width: 100%;
  height: auto;
}

.btn {
  padding: 0.4rem 0.8rem;
  text-align: center;
  border: 1px solid transparent;
  padding: 0.375rem 0.75rem;
  line-height: 1.5;
  vertical-align: middle;
  margin-top: 0.25rem;
  margin-bottom: 0.25rem;
  border-radius: 0.25rem;
  user-select: none;
  font-size: 1rem;
  font-family: $main-font-family;
  transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out,
    border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;

  @each $color in $color-map {
    &-#{nth($color,1)} {
      color: $white;
      background-color: #{nth($color, 2)};
      border-color: #{nth($color, 2)};
    }
    &-#{nth($color,1)}:focus {
      outline: transparent;
      box-shadow: 0
        0
        0
        0.2rem
        transparentize($color: nth($color, 2), $amount: 0.5);
    }

    &-#{nth($color,1)}:hover:not(:disabled),
    &-#{nth($color,1)}:focus:not(:disabled) {
      background-color: darken(nth($color, 2), 12);
      border-color: darken(nth($color, 2), 12);
    }

    &-outline-#{nth($color,1)} {
      color: #{nth($color, 2)};
      border-color: #{nth($color, 2)};
      background-color: transparent;
    }

    &-outline-#{nth($color,1)}:focus {
      outline: transparent;
      box-shadow: 0
        0
        0
        0.2rem
        transparentize($color: nth($color, 2), $amount: 0.5);
    }
    &-outline-#{nth($color,1)}:hover:not(:disabled),
    &-outline-#{nth($color,1)}:focus:not(:disabled) {
      color: $white;

      background-color: #{nth($color, 2)};
      border-color: #{nth($color, 2)};
    }

    @if (#{nth($color, 1)} == 'warning' or #{nth($color, 1)} == 'light') {
      &-#{nth($color,1)} {
        color: $black;
      }

      &-outline-#{nth($color,1)}:hover,
      &-outline-#{nth($color,1)}:focus {
        color: $black !important;
      }
    }
  }

  &-lg {
    padding: 0.5rem 1rem;
    font-size: 1.25rem;
    line-height: 1.5;
    border-radius: 0.3rem;
  }

  &-sm {
    padding: 0.25rem 0.5rem;
    font-size: 0.875rem;
    line-height: 1.5;
    border-radius: 0.2rem;
  }

  &-block {
    display: block;
    width: 100%;
  }

  &:hover:not(:disabled) {
    cursor: pointer;
  }

  &:disabled {
    opacity: 0.65;
  }
}

.h1,
h1 {
  font-size: 2.5rem;
}

.h2,
h2 {
  font-size: 2rem;
}

.h3,
h3 {
  font-size: 1.75rem;
}

.h4,
h4 {
  font-size: 1.5rem;
}

.h5,
h5 {
  font-size: 1.25rem;
}

.h6,
h6 {
  font-size: 1rem;
}

.h1,
.h2,
.h3,
.h4,
.h5,
.h6,
h1,
h2,
h3,
h4,
h5,
h6 {
  margin-bottom: 0.5rem;
  font-weight: 500;
  line-height: 1.2;
}
